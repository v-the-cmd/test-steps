import os
from dataclasses import replace
from datetime import UTC, datetime
from pathlib import Path
from unittest.mock import ANY, MagicMock, patch

from click.testing import CliRunner
from django.test import TestCase
from moneymeets.utils.s3_document import S3Document
from paramiko.client import SSHClient
from paramiko.rsakey import RSAKey

from fondsnet import import_fondsnet_contacts
from fondsnet.import_fondsnet_contacts import (
    AB_KONFI_LIST_S3_BUCKET_AND_PATH,
    MANDANT_MONEYMEETS_USER_GROUP,
    FondsnetImport,
    MultipleFondsnetContactsError,
    Row,
    RowContact,
    _get_contacts_fixture,
    _get_current_fondsnet_import,
    cmd_import_from_sftp,
    get_row_contacts_from_rows,
    get_validated_row_contacts,
)
from moneymeets_tenants.definitions import FondsnetTransactionType


class ImportFondsnetContactsTest(TestCase):
    STANDARD_ROW_CONTACT = RowContact(
        fondsnet_company_id=37,
        fondsnet_produkt_id=140,
        email="bu@example.com",
        dealer_number="Test1234",
        fondsnet_geschaeftsart_id=2,
        transaction_type=FondsnetTransactionType.ORDER.name,
        user_group=None,
    )

    TEST_XLSX = Path(__file__).parent / "Test Konfi-Liste.xlsx"

    def test_upload_to_sharepoint(self):
        file_content = b"TestString"
        file_hash = "37517e5f3dc66819f61f5a7bb8ace1921282415f10551d2defa5c3eb0985b570"

        with patch.object(S3Document, "upload", autospec=True) as mock_upload, patch.object(
            import_fondsnet_contacts,
            "get_csv_from_excel",
            return_value="",
        ):
            with self.subTest("hash changed"):
                old_fondsnet_import = FondsnetImport(hash="old hash", time="old time")
                fixtures_after_import = _get_contacts_fixture(
                    data=file_content,
                    upload=True,
                    current_fondsnet_import=old_fondsnet_import,
                )
                self.assertIn("# auto-generated", fixtures_after_import)
                self.assertIn(file_hash, fixtures_after_import)
                mock_upload.assert_called_once_with(ANY, file_content, {})
                s3_document = mock_upload.call_args[0][0]
                self.assertEqual(
                    s3_document.path_with_bucket,
                    AB_KONFI_LIST_S3_BUCKET_AND_PATH.format(file_hash=file_hash),
                )
                self.assertNotIn(old_fondsnet_import.hash, fixtures_after_import)
                self.assertNotIn(old_fondsnet_import.time, fixtures_after_import)

            with self.subTest("hash did not change"):
                fixtures_after_reimport = _get_contacts_fixture(
                    data=file_content,
                    upload=True,
                    current_fondsnet_import=_get_current_fondsnet_import(fixtures_after_import),
                )
                self.assertEqual(mock_upload.call_count, 1)
                self.assertEqual(fixtures_after_import, fixtures_after_reimport)

    def test_import_from_sftp(self):
        def mock_getfo(remote_path, fileobj):
            self.assertIn("Konfi-Liste.xlsx", remote_path)
            fileobj.write(self.TEST_XLSX.read_bytes())

        sftp_client = MagicMock()
        sftp_client.getfo = mock_getfo

        with patch.object(SSHClient, "connect"), patch.object(
            SSHClient,
            "open_sftp",
            return_value=sftp_client,
        ), patch.object(RSAKey, "from_private_key"), patch.dict(
            os.environ,
            {
                "QUOTAGUARDSTATIC_URL": "https://user:password@example.com:1234/",
                "FONDSNET_SFTP_SSH_KEY": "fondsnetkey",
            },
        ), patch.object(
            Path,
            "write_bytes",
        ), patch.object(
            Path,
            "write_text",
        ) as mock_write_text, patch.object(
            import_fondsnet_contacts,
            "datetime",
        ) as datetime_mock:
            datetime_mock.now.return_value = datetime(2022, 8, 4, 9, 49, 47, 138000, tzinfo=UTC)
            runner = CliRunner()
            assert not runner.invoke(cmd_import_from_sftp).exception
            mock_write_text.assert_called_once_with(
                """# auto-generated by import_fondsnet_contacts.py
- fields:
    hash: ed9e5617225016d3889798b5bad9c9738aa4a196e1fcc5f30bf625e3bc342a39
    time: '2022-08-04T09:49:47.138+00:00'
  model: moneymeets_tenants.fondsnetimport
- fields:
    transaction_type: CHANGE_OF_DEALER
    fondsnet_company_id: 39
    fondsnet_produkt_id: 140
    fondsnet_geschaeftsart_id: 2
    email: bu@example.com
    dealer_number: Dealer No 2
  model: moneymeets_tenants.fondsnetcontact
- fields:
    transaction_type: ORDER
    fondsnet_company_id: 37
    fondsnet_produkt_id: 140
    fondsnet_geschaeftsart_id: 2
    email: na@example.com
    dealer_number: Dealer No 1
  model: moneymeets_tenants.fondsnetcontact
""",
            )

    def test_convert_row_to_row_contact(self):
        test_row = Row(
            ausloeser=FondsnetTransactionType.ORDER,
            geschaeftsart_name=None,
            geschaeftsart_id=self.STANDARD_ROW_CONTACT.fondsnet_geschaeftsart_id,
            sparte_name=None,
            sparte_id=None,
            produktgeber_name=None,
            produktgeber_id=self.STANDARD_ROW_CONTACT.fondsnet_company_id,
            produkt_name=None,
            produkt_id=self.STANDARD_ROW_CONTACT.fondsnet_produkt_id,
            email=self.STANDARD_ROW_CONTACT.email,
            vermittler_nummer=self.STANDARD_ROW_CONTACT.dealer_number,
            user_group=None,
        )

        with self.subTest("invalid user group should be filtered"):
            self.assertEqual(
                get_row_contacts_from_rows(
                    rows=(replace(test_row, user_group="ug"),),
                ),
                (),
            )

        with self.subTest("empty produktgeber id should be filtered"):
            self.assertEqual(
                get_row_contacts_from_rows(
                    rows=(replace(test_row, produktgeber_id=None),),
                ),
                (),
            )

        with self.subTest("empty produkt id should be filtered"):
            self.assertEqual(
                get_row_contacts_from_rows(
                    rows=(replace(test_row, produkt_id=None),),
                ),
                (),
            )

        with self.subTest("FONDSNET e-mail addresses should be filtered"):
            self.assertEqual(
                get_row_contacts_from_rows(
                    rows=(replace(test_row, email="foo.bar@Fondsnet.de"),),
                ),
                (),
            )

        with self.subTest("different rows should create different outputs"):
            different_company = 40
            different_product = 145
            different_transaction_type = FondsnetTransactionType.CHANGE_OF_DEALER

            self.assertEqual(
                get_row_contacts_from_rows(
                    rows=(
                        test_row,
                        replace(
                            test_row,
                            ausloeser=different_transaction_type,
                            produktgeber_id=different_company,
                            produkt_id=different_product,
                        ),
                    ),
                ),
                (
                    self.STANDARD_ROW_CONTACT,
                    replace(
                        self.STANDARD_ROW_CONTACT,
                        fondsnet_company_id=different_company,
                        fondsnet_produkt_id=different_product,
                        transaction_type=different_transaction_type.name,
                    ),
                ),
            )

    def test_get_validated_row_contacts(self):
        with self.subTest("should return contacts if there are no duplicates"):
            contact1 = self.STANDARD_ROW_CONTACT
            contact2 = replace(self.STANDARD_ROW_CONTACT, fondsnet_company_id=40)
            validated_row_contacts = get_validated_row_contacts(row_contacts=(contact1, contact2))
            self.assertEqual(validated_row_contacts, (contact1, contact2))

        with self.subTest("should raise on duplicate entries"), self.assertRaises(MultipleFondsnetContactsError):
            get_validated_row_contacts(row_contacts=(self.STANDARD_ROW_CONTACT, self.STANDARD_ROW_CONTACT))

        with self.subTest("should override empty user_group with user_group Mandant_moneymeets"):
            ambiguous_dealer_number = "Test123456"
            contact1 = self.STANDARD_ROW_CONTACT
            contact2 = replace(
                self.STANDARD_ROW_CONTACT,
                user_group=MANDANT_MONEYMEETS_USER_GROUP,
                dealer_number=ambiguous_dealer_number,
            )
            validated_row_contacts = get_validated_row_contacts(row_contacts=(contact1, contact2))
            self.assertEqual(validated_row_contacts, (contact2,))

        with self.subTest("should throw on ambiguous email address"), self.assertRaises(MultipleFondsnetContactsError):
            contact1 = replace(self.STANDARD_ROW_CONTACT, email="first@example.com")
            contact2 = replace(self.STANDARD_ROW_CONTACT, email="second@example.com")
            get_validated_row_contacts(row_contacts=(contact1, contact2))

        with self.subTest("should throw on ambiguous dealer number"), self.assertRaises(
            MultipleFondsnetContactsError,
        ):
            contact1 = replace(self.STANDARD_ROW_CONTACT, dealer_number="1")
            contact2 = replace(self.STANDARD_ROW_CONTACT, dealer_number="2")
            get_validated_row_contacts(row_contacts=(contact1, contact2))
