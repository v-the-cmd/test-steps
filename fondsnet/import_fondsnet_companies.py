import os
from datetime import timedelta
from logging import getLogger
from pathlib import Path
from typing import Sequence

import yaml
#from fondsnet_sdk.api.schema.client.api.company import CompanyApi
#from fondsnet_sdk.api.schema.models.company.list.company import Company
#from fondsnet_sdk.logging_client import get_client
#from fondsnet_sdk.utils.companies import get_fondsnet_companies
#from spec2api.runtime.client.api_client import ApiClient

FONDSNET_COMPANY_OUTPUT_FIXTURE_PATH = Path("moneymeets_tenants/data/fixtures/fondsnet-company.yaml")


def get_companies(fondsnet_sdk_settings: dict):# -> Sequence[Company]:
    return ()
#    return get_fondsnet_companies(CompanyApi(ApiClient(get_client(fondsnet_sdk_settings, getLogger(__file__)))))


def write_fixture(companies):#: Sequence[Company]):
    content = yaml.safe_dump(
        tuple(
            {
                "fields": {
                    "name": company.name,
                },
                "model": "moneymeets_tenants.fondsnetcompany",
                "pk": company.id,
            }
            for company in companies
        ),
        allow_unicode=True,
        sort_keys=False,
        width=160,
    )
    FONDSNET_COMPANY_OUTPUT_FIXTURE_PATH.write_text(f"# auto-generated by {Path(__file__).name}\n{content}")


def main():
    write_fixture(
        get_companies(
            {
                "USER": os.environ["FONDSNET_SDK_USER"],
                "PASSWORD": os.environ["FONDSNET_SDK_PASSWORD"],
                "ENVIRONMENT": "LIVE",
                "TIMEOUT": timedelta(minutes=1),
            },
        ),
    )


if __name__ == "__main__":
    main()
